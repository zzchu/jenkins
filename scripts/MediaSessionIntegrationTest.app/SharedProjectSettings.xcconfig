SDKROOT = iphoneos8.1;
CODE_SIGN_IDENTITY = iPhone Developer
IPHONEOS_DEPLOYMENT_TARGET = 7.1;
ARCHS = $(ARCHS_STANDARD)

//OTHER_LDFLAGS = -Wl,-search_paths_first -lopenssl -lwelsenc -lwelsvp -lsafec -lresolv -lwbx_aec -lwbx_cng -lwbx_dagc -lwbx_plc -lwbx_resample -lwbx_aagc -lwbx_vad -lwbx_tsm -lwbx_sa -lwbxaecodec -lwbxaudioengine -lwmeclient -lwrtp_ios -lwqos_ios -lwseutil -lwelsdec -lwseclient -lwsertp -lwfec_ios -lsrtp_ios
OTHER_LDFLAGS = -Wl,-search_paths_first -lresolv -lopenh264 -lcrypto -lssl -lrsfec -lmariqos

ALWAYS_SEARCH_USER_PATHS = NO

WEBEX_MEDIA_PATHS = "../../.."
WEBEX_MEDIA_VENDOR_PATHS = "../../../vendor"
WEBEX_MEDIA_ENGINE_PATHS = "../../../distribution/ios"
FRAMEWORK_SEARCH_PATHS = $(inherited)
HEADER_SEARCH_PATHS = $(inherited)
LIBRARY_SEARCH_PATHS = $(inherited) $(WEBEX_MEDIA_VENDOR_PATHS)"/openssl/ciscossl/libs/ios/$(BASE_CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)" $(WEBEX_MEDIA_VENDOR_PATHS)"/openh264/libs/ios/$(BASE_CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)" $(WEBEX_MEDIA_VENDOR_PATHS)"/mari/build/libs/ios/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)" $(WEBEX_MEDIA_VENDOR_PATHS)"/nattools-0.2/target/ios/$(BASE_CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)" $(WEBEX_MEDIA_VENDOR_PATHS)"/libsdp/build/ios/$(BASE_CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)" $(WEBEX_MEDIA_ENGINE_PATHS)"/$(BASE_CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)"
OTHER_CFLAGS = -fstack-protector

// Intentionally not including the original OTHER_CPLUSPLUSFLAGS. We are not going to pass OTHER_CFLAGS to C++.
OTHER_CPLUSPLUSFLAGS = -fstack-protector -Wsign-promo

WARNING_CFLAGS = -Wall -Wextra -Wextra-tokens -Wfloat-equal -Wformat-security -Wlong-long -Wno-missing-field-initializers -Wno-unknown-pragmas -Wno-unused-parameter -Wpointer-arith -Wswitch-enum

CLANG_CXX_LIBRARY = libc++
CLANG_CXX_LANGUAGE_STANDARD = gnu++0x
GCC_C_LANGUAGE_STANDARD = gnu99


// This doesn't seem to show any build speed improvement on a corei7 machine.
// However, if we do move to clang modules, we will get auto-inclusion and linking of Apple frameworks.
// As of Dec 17, 2013, module support has not been added to CoreData, MobileCoreServices, or SystemConfiguration frameworks,
// so those would still be referenced with the old style.
//CLANG_ENABLE_MODULES = YES

CLANG_ENABLE_OBJC_ARC = YES

GCC_TREAT_WARNINGS_AS_ERRORS = NO

CLANG_WARN_BOOL_CONVERSION = YES;
CLANG_WARN_CONSTANT_CONVERSION = YES
CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES
CLANG_WARN_EMPTY_BODY = YES
CLANG_WARN_ENUM_CONVERSION = YES
CLANG_WARN_INT_CONVERSION = YES
GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES
GCC_WARN_64_TO_32_BIT_CONVERSION = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_SIGN_COMPARE = YES
GCC_WARN_UNINITIALIZED_AUTOS = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_VARIABLE = YES
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES
CLANG_WARN_OBJC_ROOT_CLASS = YES
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES
GCC_WARN_UNDECLARED_SELECTOR = YES

// Conversation.lastViewableActivity does not have an inverse; we have it configured that way, so don't warn us.
MOMC_NO_INVERSE_RELATIONSHIP_WARNINGS = YES

// Enable the remaining security checks which aren't on by default.
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES

// for code coverage
CC_GENERATE_TEST_COVERAGE_FILES = YES
GCC_INSTRUMENT_PROGRAM_FLOW_ARCS = YES
GCC_GENERATE_DEBUGGING_SYMBOLS = YES
